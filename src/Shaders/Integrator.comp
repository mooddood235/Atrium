#version 460 core

#include "PRNG.glsl"
#include "Samplers.glsl"

// ---------------- Structures ----------------
struct Camera{
	mat4 modelMatrix;
	mat4 projectionMatrix;
};
struct Ray{
	vec3 o;
	vec3 d;
};
struct HitInfo{
    bool didHit;
    float t;
    vec3 p;
    vec3 n;
    uint matIndex;
};
struct Vertex{
    vec3 p;
    float pad0;
    vec3 n;
    float pad1;
};
struct Triangle{
    uint i0, i1, i2;
    uint matIndex;
};
struct BVHNode {
	vec3 aabbMin;
	float pad0;
	vec3 aabbMax;
	float pad1;
	uint trianglesOffset;
	uint secondChildOffset;
	uint trianglesCount;
	uint splitAxis;
};
struct Material{
    vec3 albedo;
    float pad0;
    float roughness;
    float metallic;
    vec2 pad1;
};
// ---------------- Constants ----------------------------
HitInfo NoHit = HitInfo(false, 1./0., vec3(0), vec3(0), -1);

// ---------------- Function Declarations ----------------
Ray GenCamRay();
vec3 Sample();
vec3 At(Ray ray, float t);
vec3 SampleEnvMap(vec3 dir);
HitInfo Hit_Triangle(Ray ray, Triangle triangle);
HitInfo Hit_AABB(Ray ray, vec3 invDir, uint dirIsNeg[3], vec3 cornerMin, vec3 cornerMax);
HitInfo Hit_BVH(Ray ray);
// ---------------- Uniforms ----------------
uniform uint seed;
uniform uint samples;
uniform uint depth;
uniform uint renderMode;
uniform Camera camera;
layout(rgba32f, binding = 0) uniform image2D film;
layout(binding = 1) uniform sampler2D environmentMap;

// --------------- Buffers ------------------
layout (std140, binding = 0) buffer Vertices{
    Vertex vertices[];
};
layout (std140, binding = 1) buffer Triangles{
    Triangle triangles[];
};
layout (std140, binding = 2) buffer BVHNodes{
    BVHNode bvhNodes[];
};
layout (std140, binding = 3) buffer Materials{
    Material materials[];
};

// ----------------- Work group -------------
layout(local_size_x = 8, local_size_y = 4) in;

// -------------- Shared --------------------
shared uint stack[gl_WorkGroupSize.x * gl_WorkGroupSize.y][30];
// -------------- Globals --------------------
uvec2 viewPortDims;
uint globalIndex;
uint prngState;

void main(){
    // ----------- Init Globals -------------
    viewPortDims = uvec2(gl_NumWorkGroups.x * gl_WorkGroupSize.x, gl_NumWorkGroups.y * gl_WorkGroupSize.y);
    globalIndex = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * viewPortDims.x;
    prngState = pcg_hash(globalIndex + pcg_hash(seed));
    // ----------- Main --------------------
    vec3 irradiance = vec3(0.0);
    for (uint _sample = 1; _sample <= samples; _sample++) irradiance += Sample();

    vec3 read = renderMode == 0 ? vec3(0.0) : imageLoad(film, ivec2(gl_GlobalInvocationID)).rgb;
	imageStore(film, ivec2(gl_GlobalInvocationID), vec4(read + irradiance, 1.0));
}
// ---------------- Function Definitions ----------------
Ray GenCamRay(){
	//vec2 ndcCoord = ((vec2(gl_GlobalInvocationID) + 0.5) / viewPortDims * 2.0) - 1.0;
    vec2 ndcCoord = (vec2(gl_GlobalInvocationID) + rand(prngState)) / viewPortDims * 2.0 - 1.0;

	// Convert the NDC coordinate to clip space coordinates
    vec4 clipCoord = vec4(ndcCoord, -1.0, 1.0);

    // Transform the clip space coordinate to eye space coordinates
    vec4 eyeCoord = inverse(camera.projectionMatrix) * clipCoord;
    eyeCoord.w = 0;

    // Transform the eye space coordinate to world space coordinates
    vec4 worldCoord = camera.modelMatrix * eyeCoord;

    // Calculate the camera ray direction
    vec3 rayOrigin = vec3(camera.modelMatrix * vec4(0.0, 0.0, 0.0, 1.0));
    vec3 rayDirection = normalize(worldCoord.xyz);
    return Ray(rayOrigin, rayDirection);
}
vec3 Sample(){
    vec3 irradiance = vec3(1.0);

    Ray ray = GenCamRay();
    HitInfo hitInfo;

    for (uint i = 1; i <= depth + 1; i++){
        if (i == depth + 1){
            irradiance = vec3(0.0);
            break;
        }
        hitInfo = Hit_BVH(ray);

        if (hitInfo.didHit){
            vec3 wi = normalize(GetTangentSpace(hitInfo.n) * SampleHemisphere(rand(prngState), rand(prngState)));
            ray = Ray(hitInfo.p + hitInfo.n * 0.0001, wi);
            Material mat = materials[hitInfo.matIndex];
            irradiance *= mat.albedo / PI / SampleHemispherePDF() * sdot(wi, hitInfo.n);
        }
        else{
            irradiance *= SampleEnvMap(ray.d);
            break;
        }
    }
    return irradiance;
}
vec3 At(Ray ray, float t){
    return ray.o + ray.d * t;
}
vec3 SampleEnvMap(vec3 dir)
{
	const vec2 invAtan = vec2(0.1591, 0.3183);

    vec2 uv = vec2(atan(dir.z, dir.x), asin(dir.y));
    uv *= invAtan;
    uv += 0.5;
    
	return textureLod(environmentMap, uv, 0.0).rgb;
};
HitInfo Hit_Triangle(Ray ray, Triangle triangle){
    Vertex v0 = vertices[triangle.i0];
    Vertex v1 = vertices[triangle.i1];
    Vertex v2 = vertices[triangle.i2];

    vec3 vertex0 = v0.p;
    vec3 vertex1 = v1.p;
    vec3 vertex2 = v2.p;
    vec3 edge1, edge2, h, s, q;
    float a,f,u,v;
    edge1 = vertex1 - vertex0;
    edge2 = vertex2 - vertex0;
    h = cross(ray.d, edge2);
    a = dot(edge1, h);
    if (a > -EPSILON && a < EPSILON)
        return NoHit;    // This ray is parallel to this triangle.
    f = 1.0/a;
    s = ray.o - vertex0;
    u = f * dot(s, h);
    if (u < 0.0 || u > 1.0)
        return NoHit;
    q = cross(s, edge1);
    v = f * dot(ray.d, q);
    if (v < 0.0 || u + v > 1.0)
        return NoHit;
    // At this stage we can compute t to find out where the intersection point is on the line.
    float t = f * dot(edge2, q);
    if (t <= EPSILON) return NoHit;

    float w = 1.0 - u - v;

    vec3 n = normalize(w * v0.n + u * v1.n + v * v2.n);

    return HitInfo(true, t, At(ray, t), n, triangle.matIndex);
}
HitInfo Hit_AABB(Ray ray, vec3 invDir, uint dirIsNeg[3], vec3 cornerMin, vec3 cornerMax){
	float tx1 = (cornerMin.x - ray.o.x) * invDir.x, tx2 = (cornerMax.x - ray.o.x) * invDir.x;
    float tmin = min( tx1, tx2 ), tmax = max( tx1, tx2 );
    float ty1 = (cornerMin.y - ray.o.y) * invDir.y, ty2 = (cornerMax.y - ray.o.y) * invDir.y;
    tmin = max( tmin, min( ty1, ty2 ) ), tmax = min( tmax, max( ty1, ty2 ) );
    float tz1 = (cornerMin.z - ray.o.z) * invDir.z, tz2 = (cornerMax.z - ray.o.z) * invDir.z;
    tmin = max( tmin, min( tz1, tz2 ) ), tmax = min( tmax, max( tz1, tz2 ) );
    if (tmax >= tmin && tmax > 0){
		HitInfo hitInfo;
		hitInfo.didHit = true;
		hitInfo.t = clamp(tmin, 0, tmin);
		return hitInfo;
	}
	return NoHit;
}
HitInfo Hit_BVH(Ray ray){
    HitInfo closestHit = NoHit;
    HitInfo hitInfo;

    stack[gl_LocalInvocationIndex][0] = 0;
    uint stackSize = 1;

    vec3 invDir = vec3(1.0 / ray.d.x, 1.0 / ray.d.y, 1.0 / ray.d.z);
    uint dirIsNeg[3] = {uint(invDir.x < 0), uint(invDir.y < 0), uint(invDir.z < 0)};

    while (stackSize > 0){
        uint currNodeIndex = stack[gl_LocalInvocationIndex][--stackSize];
        BVHNode node = bvhNodes[currNodeIndex];

        hitInfo = Hit_AABB(ray, invDir, dirIsNeg, node.aabbMin, node.aabbMax);

        if (hitInfo.didHit && hitInfo.t < closestHit.t){
            if (node.trianglesCount > 0){
                for (uint i = 0; i < node.trianglesCount; i++){
                    hitInfo = Hit_Triangle(ray, triangles[node.trianglesOffset + i]);
                    if (hitInfo.didHit && hitInfo.t < closestHit.t) closestHit = hitInfo;
                }
            }
            else{
                if (bool(dirIsNeg[node.splitAxis])){
                    stack[gl_LocalInvocationIndex][stackSize++] = currNodeIndex + 1;
                    stack[gl_LocalInvocationIndex][stackSize++] = node.secondChildOffset;
                }
                else{
                    stack[gl_LocalInvocationIndex][stackSize++] = node.secondChildOffset;
                    stack[gl_LocalInvocationIndex][stackSize++] = currNodeIndex + 1;
                }
            }
        }
    }
    return closestHit;
}
