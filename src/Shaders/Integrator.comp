#version 460 core

struct Camera{
	mat4 modelMatrix;
	mat4 projectionMatrix;
};
struct Ray{
	vec3 o;
	vec3 d;
};
// ---------------- Function Declarations ----------------
Ray GenCamRay();
vec3 SampleEnvMap(vec3 dir);
// ---------------- Uniforms ----------------
uniform Camera camera;
layout(rgba32f, binding = 0) uniform image2D film;
layout(binding = 1) uniform sampler2D environmentMap;


layout(local_size_x = 8, local_size_y = 4) in;

void main(){
	Ray ray = GenCamRay();
	imageStore(film, ivec2(gl_GlobalInvocationID), vec4(SampleEnvMap(ray.d), 1.0));
}

// ---------------- Function Definitions ----------------
Ray GenCamRay(){
	vec2 ndcCoord = ((vec2(gl_GlobalInvocationID) + 0.5) / imageSize(film) * 2.0) - 1.0;

	// Convert the NDC coordinate to clip space coordinates
    vec4 clipCoord = vec4(ndcCoord, -1.0, 1.0);

    // Transform the clip space coordinate to eye space coordinates
    vec4 eyeCoord = inverse(camera.projectionMatrix) * clipCoord;
    eyeCoord.w = 0;

    // Transform the eye space coordinate to world space coordinates
    vec4 worldCoord = camera.modelMatrix * eyeCoord;

    // Calculate the camera ray direction
    vec3 rayDirection = normalize(worldCoord.xyz);

    return Ray(vec3(camera.modelMatrix * vec4(0.0, 0.0, 0.0, 1.0)), rayDirection);
}
vec3 SampleEnvMap(vec3 dir)
{
	const vec2 invAtan = vec2(0.1591, 0.3183);

    vec2 uv = vec2(atan(dir.z, dir.x), asin(dir.y));
    uv *= invAtan;
    uv += 0.5;
    
	return texture(environmentMap, uv).rgb;
};